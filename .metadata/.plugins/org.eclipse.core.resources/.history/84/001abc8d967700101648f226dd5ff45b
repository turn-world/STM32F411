/*
 * sd.c
 *
 *  Created on: Aug 10, 2025
 *      Author: young
 */


#include "sd.h"
#include "gpio.h"
#include "cli.h"

static bool is_init = false;
// init이 되었느냐
static bool is_detected = false;

SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio_rx;
DMA_HandleTypeDef hdma_sdio_tx;

bool sdInit(void)
{
	bool ret = false;

	  hsd.Instance 					= SDIO;
	  hsd.Init.ClockEdge 			= SDIO_CLOCK_EDGE_RISING;
	  hsd.Init.ClockBypass 			= SDIO_CLOCK_BYPASS_DISABLE;
	  hsd.Init.ClockPowerSave 		= SDIO_CLOCK_POWER_SAVE_DISABLE;
	  hsd.Init.BusWide 				= SDIO_BUS_WIDE_1B;
	  hsd.Init.HardwareFlowControl 	= SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
	  hsd.Init.ClockDiv 			= SDIO_TRANSFER_CLK_DIV;

	  is_detected = false;
	  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
	  {
	    is_detected = true;
	  }

	  if(is_detected == true)
	  {
		  if (HAL_SD_Init(&hsd) == HAL_OK)
		  {
		        if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
		        {
		          ret = true;
		        }
		  }
	  }

	 is_init = ret;

#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
#endif


  bool sdDeInit(void)
  {
    bool ret = false;

    if (is_init == true)
    {
      if (HAL_SD_DeInit(&hsd) == HAL_OK)
      {
        ret = true;
      }
    }

	return ret;
}

  bool sdIsInit(void)
  {
    return is_init;
  }


  bool sdIsDetected(void)
  {
    if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
    {
      is_detected = true;
    }
    else
    {
      is_detected = false;
    }

    return is_detected;
  }

  bool sdGetInfo(sd_info_t *p_info)
  {
    bool ret = false;
    sd_info_t *p_sd_info = (sd_info_t *)p_info;

    HAL_SD_CardInfoTypeDef card_info;


    if (is_init == true)
    {
      HAL_SD_GetCardInfo(&hsd, &card_info);

      p_sd_info->card_type          = card_info.CardType;
      p_sd_info->card_version       = card_info.CardVersion;
      p_sd_info->card_class         = card_info.Class;
      p_sd_info->rel_card_Add       = card_info.RelCardAdd;
      p_sd_info->block_numbers      = card_info.BlockNbr;
      p_sd_info->block_size         = card_info.BlockSize;
      p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
      p_sd_info->log_block_size     = card_info.LogBlockSize;
      p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
      ret = true;
    }

    return ret;
  }

  bool sdIsBusy(void)
  {
    bool is_busy;


    if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
    {
      is_busy = false;
    }
    else
    {
      is_busy = true;
    }

    return is_busy;
  }

  bool sdIsReady(uint32_t timeout)
  {
    uint32_t pre_time;

    pre_time = millis();

    while(millis() - pre_time < timeout)
    {
      if (sdIsBusy() == false)
      {
        return true;
      }
    }

    return false;
  }

  bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
  {
    bool ret = false;
    uint32_t pre_time;


    is_rx_done = false;
    if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
    {

      pre_time = millis();
      while(is_rx_done == false)
      {
        if (millis()-pre_time >= timeout_ms)
        {
          break;
        }
      }
      while(sdIsBusy() == true)
      {
        if (millis()-pre_time >= timeout_ms)
        {
          is_rx_done = false;
          break;
        }
      }
      ret = is_rx_done;
    }

    return ret;
  }

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDIO)
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();

    __HAL_RCC_GPIOA_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}

void HAL_SD_MspDeInit(SD_HandleTypeDef* sdHandle)
{

  if(sdHandle->Instance==SDIO)
  {
  /* USER CODE BEGIN SDIO_MspDeInit 0 */

  /* USER CODE END SDIO_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDIO_CLK_DISABLE();

    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9);

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7);

    /* SDIO DMA DeInit */
    HAL_DMA_DeInit(sdHandle->hdmarx);
    HAL_DMA_DeInit(sdHandle->hdmatx);

    /* SDIO interrupt Deinit */
    HAL_NVIC_DisableIRQ(SDIO_IRQn);
  /* USER CODE BEGIN SDIO_MspDeInit 1 */

    /* DMA controller clock enable */
    __HAL_RCC_DMA2_CLK_ENABLE();

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);

  /* USER CODE END SDIO_MspDeInit 1 */
  }
}
